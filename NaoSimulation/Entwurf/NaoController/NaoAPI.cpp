// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define NaoSimulation_Entwurf_NaoController_NaoAPI_BODY

/************************************************************
 NaoAPI class body
 ************************************************************/

// include associated header file
#include "NaoSimulation/Entwurf/NaoController/NaoAPI.h"

// Header, die fuer das Erzeugen der konkreten Kommandos notwendig sind
// Header fuer den Arm
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/LEllenbogenGierenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/LEllenbogenRollenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/LHandgelenkGierenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/LHandOeffnenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/LHandSchliessenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/REllenbogenGierenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/REllenbogenRollenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/RHandgelenkGierenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/RHandOeffnenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/ArmCommand/RHandschliessenCC.h"
// Header fuer das Bein
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/LKnieNickenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/LSprunggelenkNickenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/LSprunggelenkRollen.h"
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/RKnieNickenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/RSprunggelenkNickenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/BeinCommand/RSprunggelenkRollenCC.h"
//Header fÃ¼r den Kopf
#include "NaoSimulation/Entwurf/NaoController/Command/KopfCommand/HalsgelenkGierenCC.h"
#include "NaoSimulation/Entwurf/NaoController/Command/KopfCommand/HalsgelenkNickenCC.h"

#include "NaoSimulation/Entwurf/NaoObserver/Subject.h"
#include "NaoSimulation/Entwurf/NaoModel/Welt/Welt.h"
#include "NaoSimulation/Entwurf/NaoView/ModelObserver.h"





namespace NaoSimulation {
namespace Entwurf {
namespace NaoController {

// static attributes (if any)

/**
 * 
 * @param bewegung 
 * @param absWinkel 
 * @param maxGeschwindingkeit 
 */
void NaoAPI::setAngle(GelenkBewegung /*in*/bewegung,
		::PrimitiveTypes::Real /*in*/absWinkel,
		::PrimitiveTypes::Real /*in*/maxGeschwindingkeit) {
	dAllocateODEDataForThread(dAllocateMaskAll);
	// Ablauf
	// 1. Unterscheidung nach der jeweiligen Bewegungsart:
	switch(bewegung) {
		// linkes Knie nicken
		case LKnieNicken: {
			gelenkcommand[0]->setzeParameter(absWinkel);
			gelenkcommand[0]->execute();
		} break;
		// rechtes Knie nicken
		case RKnieNicken: {
			gelenkcommand[1]->setzeParameter(absWinkel);
			gelenkcommand[1]->execute();
		} break;
		// linkes Sprunggelenk nicken
		case LSprunggelenkNicken: {
			gelenkcommand[2]->setzeParameter(absWinkel);
			gelenkcommand[2]->execute();
		} break;
		// rechtes Sprunggelenk nicken
		case RSprunggelenkNicken: {
			gelenkcommand[3]->setzeParameter(absWinkel);
			gelenkcommand[3]->execute();
		} break;
		// linkes Sprunggelenk rollen
		case LSprunggelenkRollen: {
			gelenkcommand[4]->setzeParameter(absWinkel);
			gelenkcommand[4]->execute();
		} break;
		// rechtes Sprunggelenk rollen
		case RSprungelenkRollen: {
			gelenkcommand[5]->setzeParameter(absWinkel);
			gelenkcommand[5]->execute();
		} break;
		// linker Ellenbogen gieren
		case LEllenbogenGieren: {
			gelenkcommand[6]->setzeParameter(absWinkel);
			gelenkcommand[6]->execute();
		} break;
		// rechter Ellenbogen gieren
		case REllenbogenGieren: {
			gelenkcommand[7]->setzeParameter(absWinkel);
			gelenkcommand[7]->execute();
		} break;
		// linker Ellenbogen rollen
		case LEllenbogenRollen: {
			gelenkcommand[8]->setzeParameter(absWinkel);
			gelenkcommand[8]->execute();
		} break;
		// rechter Ellenbogen rollen
		case REllenbogenRollen: {
			gelenkcommand[9]->setzeParameter(absWinkel);
			gelenkcommand[9]->execute();
		} break;
		// linkes Handgelenk gieren
		case LHandgelenkGieren: {
			gelenkcommand[10]->setzeParameter(absWinkel);
			gelenkcommand[10]->execute();
		} break;
		// rechtes Handgelenk gieren
		case RHandgelenkGieren: {
			gelenkcommand[11]->setzeParameter(absWinkel);
			gelenkcommand[11]->execute();
		} break;
		//Halsgelenk Gieren
		case HalsgelenkGieren: {
			gelenkcommand[12]->setzeParameter(absWinkel);
			gelenkcommand[12]->execute();
		} break;
		//Halsgelenk Nicken
		case HalsgelenkNicken: {
			gelenkcommand[13]->setzeParameter(absWinkel);
			gelenkcommand[13]->execute();
		} break;
		/*// linke Hand oeffnen
		case LHandOeffnen: {
			gelenkcommand[12]->setzeParameter(absWinkel);
			gelenkcommand[12]->execute();
		} break;
		// rechte Hand oeffnen
		case RHandOeffnen: {
			gelenkcommand[13]->setzeParameter(absWinkel);
			gelenkcommand[13]->execute();
		} break;
		// linke Hand schliessen
		case LHandSchliessen: {
			gelenkcommand[14]->setzeParameter(absWinkel);
			gelenkcommand[14]->execute();
		} break;
		// rechte Hand schliessen
		case RHandSchliessen: {
			gelenkcommand[15]->setzeParameter(absWinkel);
			gelenkcommand[15]->execute();
		} break;*/
		
		// An dieser Stelle muessen weitere Kommandos eingefuegt werden ... [ANPASSEN]
		
		// Falls das Kommando nicht gefunden wird
		default: {std::cout << "Fehler: Kommando nicht gefunden" << std::endl;}
	}
}

void NaoAPI::init() {
	// erzeuge einen ModelObserver
	// Achtung: Der ModelObserver startet die Grafik-Simulationsschleife
	NaoSimulation::Entwurf::NaoView::ModelObserver* mo = new NaoSimulation::Entwurf::NaoView::ModelObserver();
	// Hole den WeltZeichner, der vom ModelObserver erstellt wurde
	wZeichner = mo->getWeltZeichner();

	// Initialialisierung des Roboters in der Physik-Welt (+ Grafik)
	pSim = NaoSimulation::Entwurf::NaoModel::PhysikSim::initSim();
	
	// Erzeugung des ModelSubjects und Zuordnung des vorher erstellten Observers
	pSim->setModelSubject(
		new NaoSimulation::Entwurf::NaoObserver::Subject<NaoSimulation::Entwurf::NaoModel::Welt::Welt>(mo)
	);

	// Kommandos fuer die Bewegungen der einzelnen Gelenke anlegen
	// linkes Knie nicken
	gelenkcommand[0] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::LKnieNickenCC(pSim->getWelt()->getRoboter()->getLinkesBein()->getKnie());
	// rechtes Knie nicken
	gelenkcommand[1] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::RKnieNickenCC(pSim->getWelt()->getRoboter()->getRechtesBein()->getKnie());
	// linkes Sprunggelenk nicken
	gelenkcommand[2] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::LSprunggelenkNickenCC(pSim->getWelt()->getRoboter()->getLinkesBein()->getSprunggelenk());
	// rechtes Sprunggelenk nicken
	gelenkcommand[3] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::RSprunggelenkNickenCC(pSim->getWelt()->getRoboter()->getRechtesBein()->getSprunggelenk());
	// linkes Sprunggelenk rollen
	gelenkcommand[4] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::LSprunggelenkRollenCC(pSim->getWelt()->getRoboter()->getLinkesBein()->getSprunggelenk());
	// rechtes Sprunggelenk rollen
	gelenkcommand[5] = new NaoSimulation::Entwurf::NaoController::Command::BeinCommand::RSprunggelenkRollenCC(pSim->getWelt()->getRoboter()->getRechtesBein()->getSprunggelenk());
	// linker Ellenbogen gieren
	gelenkcommand[6] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::LEllenbogenGierenCC(pSim->getWelt()->getRoboter()->getLinkenArm()->getEllenbogen());
	// rechter Ellenbogen gieren
	gelenkcommand[7] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::REllenbogenGierenCC(pSim->getWelt()->getRoboter()->getRechtenArm()->getEllenbogen());
	// linker Ellenbogen rollen
	gelenkcommand[8] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::LEllenbogenRollenCC(pSim->getWelt()->getRoboter()->getLinkenArm()->getEllenbogen());
	// rechter Ellenbogen rollen
	gelenkcommand[9] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::REllenbogenRollenCC(pSim->getWelt()->getRoboter()->getRechtenArm()->getEllenbogen());
	// linkes Handgelenk gieren
	gelenkcommand[10] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::LHandgelenkGierenCC(pSim->getWelt()->getRoboter()->getLinkenArm()->getHandgelenk());
	// rechtes Handgelenk gieren
	gelenkcommand[11] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::RHandgelenkGierenCC(pSim->getWelt()->getRoboter()->getRechtenArm()->getHandgelenk());
	//Halsgelenk gieren
	gelenkcommand[12] = new NaoSimulation::Entwurf::NaoController::Command::KopfCommand::HalsgelenkGierenCC(pSim->getWelt()->getRoboter()->getKopf()->getHalsgelenk());
	//Halsgelenk nicken
	gelenkcommand[13] = new NaoSimulation::Entwurf::NaoController::Command::KopfCommand::HalsgelenkNickenCC(pSim->getWelt()->getRoboter()->getKopf()->getHalsgelenk());

	/*// linke Hand oeffnen
	gelenkcommand[12] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::LHandOeffnenCC(pSim->getWelt()->getRoboter()->getLinkenArm()->getHand());
	// rechte Hand oeffnen
	gelenkcommand[13] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::RHandOeffnenCC(pSim->getWelt()->getRoboter()->getRechtenArm()->getHand());
	// linke Hand schliessen
	gelenkcommand[14] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::LHandSchliessenCC(pSim->getWelt()->getRoboter()->getLinkenArm()->getHand());
	// rechte Hand schliessen
	gelenkcommand[15] = new NaoSimulation::Entwurf::NaoController::Command::ArmCommand::RHandschliessenCC(pSim->getWelt()->getRoboter()->getRechtenArm()->getHand());
	*/
	// ...
	
	// Schicke die Ausgangsposition der Welt an den ModelObserver
	pSim->getModelSubject()->notify(pSim->getWelt());

	// starte die Physik-Simulation
	pSim->startSimLoopThread();
}
NaoSimulation::Entwurf::NaoModel::Welt::Welt* NaoAPI::getWelt(){
	return NaoAPI::pSim->getWelt();
}


} // of namespace NaoController
} // of namespace Entwurf
} // of namespace NaoSimulation

/************************************************************
 End of NaoAPI class body
 ************************************************************/
