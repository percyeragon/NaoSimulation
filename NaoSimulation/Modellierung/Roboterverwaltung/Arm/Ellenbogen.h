// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_ARM_ELLENBOGEN_H
#define NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_ARM_ELLENBOGEN_H

/************************************************************
 Ellenbogen class header
 ************************************************************/

//#include "NaoSimulation/Modellierung/Roboterverwaltung/Arm/Pkg_Arm.h"

#include "../../../Entwurf/NaoModel/Gelenke/ZweifachScharniergelenk.h"
#include "../Freiheitsgrad.h"
#include "../../../../PrimitiveTypes/Pkg_PrimitiveTypes.h"

#include "Oberarm.h"
#include "Unterarm.h"

/*
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Arm {
class Oberarm;
}
}
}
}
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Arm {
class Unterarm;
}
}
}
}
*/
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Arm {

/************************************************************/
/**
 * 
 */
class Ellenbogen: public ::NaoSimulation::Entwurf::NaoModel::Gelenke::ZweifachScharniergelenk {
public:

	/**
	 * 
	 */
	::NaoSimulation::Modellierung::Roboterverwaltung::Freiheitsgrad fg[2];

	// Copy-Konstruktor
    Ellenbogen(Ellenbogen& ellenbogen, Oberarm* oberarm, Unterarm* unterarm):
        fg {
			Freiheitsgrad(ellenbogen.fg[0].getWinkel(), ellenbogen.fg[0].getWinkelMin(), ellenbogen.fg[0].getWinkelMax()),
			Freiheitsgrad(ellenbogen.fg[1].getWinkel(), ellenbogen.fg[1].getWinkelMin(), ellenbogen.fg[1].getWinkelMax())
		},
        oberarm(oberarm),
        unterarm(unterarm) {}

    // Konstruktor
    Ellenbogen(Oberarm* oberarm,
        Unterarm* unterarm,
        ::PrimitiveTypes::Real rollWinkel,
        ::PrimitiveTypes::Real rollWinkelMin,
        ::PrimitiveTypes::Real rollWinkelMax,
        ::PrimitiveTypes::Real gierWinkel,
        ::PrimitiveTypes::Real gierWinkelMin,
        ::PrimitiveTypes::Real gierWinkelMax
    ) : 
        ZweifachScharniergelenk(),
        oberarm(oberarm),
        unterarm(unterarm),
        fg {
			Freiheitsgrad(gierWinkel, gierWinkelMin, gierWinkelMax),
			Freiheitsgrad(rollWinkel, rollWinkelMin, rollWinkelMax)
		} {}
    
    static Ellenbogen* erzeugeLinkenEllenbogen(
        Oberarm* oberarm,
        Unterarm* unterarm,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
    );

    static Ellenbogen* erzeugeRechterEllenbogen(
        Oberarm* oberarm,
        Unterarm* unterarm,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
    );

	/**
	 * 
	 * @param winkel 
	 */
	void giereEllenbogen(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWInkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWinkelMin();

	/**
	 * 
	 * @param winkel 
	 */
	void rolleEllenbogen(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkelMin();

	Unterarm* getUnterarm();

	Oberarm* getOberarm();

private:

	/**
	 * 
	 */
	Unterarm* unterarm;

	/**
	 * 
	 */
	Oberarm* oberarm;
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Arm
} // of namespace Roboterverwaltung
} // of namespace Modellierung
} // of namespace NaoSimulation

/************************************************************
 End of Ellenbogen class header
 ************************************************************/

#endif
