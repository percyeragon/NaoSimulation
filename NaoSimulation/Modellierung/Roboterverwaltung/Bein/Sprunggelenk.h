// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_BEIN_SPRUNGGELENK_H
#define NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_BEIN_SPRUNGGELENK_H

/************************************************************
 Sprunggelenk class header
 ************************************************************/

//#include "NaoSimulation/Modellierung/Roboterverwaltung/Bein/Pkg_Bein.h"

#include "../../../Entwurf/NaoModel/Gelenke/ZweifachScharniergelenk.h"
#include "../Freiheitsgrad.h"
#include "../../../../PrimitiveTypes/Pkg_PrimitiveTypes.h"

#include "Schienbein.h"
#include "Fuss.h"

/*
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Bein {
class Fuss;
}
}
}
}
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Bein {
class Schienbein;
}
}
}
}
*/
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Bein {

/************************************************************/
/**
 * 
 */
class Sprunggelenk: public ::NaoSimulation::Entwurf::NaoModel::Gelenke::ZweifachScharniergelenk {
public:

	/**
	 * 
	 */
	::NaoSimulation::Modellierung::Roboterverwaltung::Freiheitsgrad fg[2];

	// Copy-Konstruktor
    Sprunggelenk(Sprunggelenk& sprunggelenk, Schienbein* schienbein, Fuss* fuss):
		fg {
			Freiheitsgrad(sprunggelenk.fg[0].getWinkel(), sprunggelenk.fg[0].getWinkelMin(), sprunggelenk.fg[0].getWinkelMax()),
			Freiheitsgrad(sprunggelenk.fg[1].getWinkel(), sprunggelenk.fg[1].getWinkelMin(), sprunggelenk.fg[1].getWinkelMax())
		},
        schienbein(schienbein),
        fuss(fuss) {}

    // Konstruktor
    Sprunggelenk(Fuss* fuss,
        Schienbein* schienbein,
        ::PrimitiveTypes::Real rollWinkel,
        ::PrimitiveTypes::Real rollWinkelMin,
        ::PrimitiveTypes::Real rollWinkelMax,
        ::PrimitiveTypes::Real nickWinkel,
        ::PrimitiveTypes::Real nickWinkelMin,
        ::PrimitiveTypes::Real nickWinkelMax
    ) : 
        ZweifachScharniergelenk(),
        fuss(fuss),
        schienbein(schienbein),
        fg {
			Freiheitsgrad(nickWinkel, nickWinkelMin, nickWinkelMax),
			Freiheitsgrad(rollWinkel, rollWinkelMin, rollWinkelMax)
		} {}
    
    static Sprunggelenk* erzeugeLinkesSprunggelenk(
        Fuss* fuss,
        Schienbein* schienbein,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
    );

    static Sprunggelenk* erzeugeRechtesSprunggelenk(
        Fuss* fuss,
        Schienbein* schienbein,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
    );
	
	void nickeSprunggelenk(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkelMin();

	/**
	 * 
	 * @param winkel 
	 */
	void rolleSprunggelenk(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getRollWinkelMin();

	Schienbein* getSchienbein();

	Fuss* getFuss();

private:

	/**
	 * 
	 */
	Schienbein* schienbein;

	/**
	 * 
	 */
	Fuss* fuss;
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Bein
} // of namespace Roboterverwaltung
} // of namespace Modellierung
} // of namespace NaoSimulation

/************************************************************
 End of Sprunggelenk class header
 ************************************************************/

#endif
