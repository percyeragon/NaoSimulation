// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define NaoSimulation_Modellierung_Roboterverwaltung_Kopf_Halsgelenk_BODY

/************************************************************
 Sprunggelenk class body
 ************************************************************/

// include associated header file
#include "Halsgelenk.h"

// Derived includes directives


namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Kopf {

Halsgelenk* Halsgelenk::erzeugeHalsgelenk(
        Schaedel* schaedel,
        Torso* torso,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
) {
    Halsgelenk* halsgelenk = new Halsgelenk(
        schaedel,
        torso,
        0.0,
        halsgelenkGierenParams.minWinkel,
        halsgelenkGierenParams.maxWinkel,
        0.0,
        halsgelenkNickenParams.minWinkel,
        halsgelenkNickenParams.maxWinkel
    );

    halsgelenk->setODEZwischenkoerper(NaoSimulation::Entwurf::NaoModel::ODE::erzeugeODEBody(
        halsgelenkZwischenkoerper.masse,
        halsgelenkZwischenkoerper.position,
        halsgelenkZwischenkoerper.ausrichtung,
        halsgelenkZwischenkoerper.radius,
        halsgelenkZwischenkoerper.hoehe,
        welt
    ));

    halsgelenk->setODEGelenk1(NaoSimulation::Entwurf::NaoModel::ODE::erzeugeODEGelenk(
        halsgelenkGierenParams.position,
        halsgelenkGierenParams.ausrichtung,
        halsgelenkGierenParams.maxGeschwindigkeit,
        halsgelenkGierenParams.maxWinkel,
        halsgelenkGierenParams.minWinkel,
        welt,
        halsgelenk->getSchaedel()->getOdeKoerperteil(),
        halsgelenk->getODEZwischenkoerper()
    ));
    halsgelenk->setODEGelenk2(NaoSimulation::Entwurf::NaoModel::ODE::erzeugeODEGelenk(
        halsgelenkNickenParams.position,
        halsgelenkNickenParams.ausrichtung,
        halsgelenkNickenParams.maxGeschwindigkeit,
        halsgelenkNickenParams.maxWinkel,
        halsgelenkNickenParams.minWinkel,
        welt,
        halsgelenk->getODEZwischenkoerper(),
        halsgelenk->getTorso()->getOdeKoerperteil()
    ));
    
    return halsgelenk;
}


void Halsgelenk::nickeHalsgelenk(::PrimitiveTypes::Real /*in*/winkel) {
	// ODE-Gelenk2 ist fuer das 'Nicken' zustaendig
    NaoSimulation::Entwurf::NaoModel::ODE::bewegeGelenk(odeGelenk2, winkel, &bewegtSich);
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getNickWinkel() {
	return fg[0].getWinkel();
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getNickWinkelMax() {
	return fg[0].getWinkelMax();
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getNickWinkelMin() {
	return fg[0].getWinkelMin();
}

/**
 * 
 * @param winkel 
 */
void Halsgelenk::giereHalsgelenk(::PrimitiveTypes::Real /*in*/winkel) {
	// ODE-Gelenk1 ist fuer das 'Gieren' zustaendig
    NaoSimulation::Entwurf::NaoModel::ODE::bewegeGelenk(odeGelenk1, winkel, &bewegtSich);
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getGierWinkel() {
	return fg[1].getWinkel();
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getGierWinkelMax() {
	return fg[1].getWinkelMax();
}

/**
 * 
 * @return result 
 */
::PrimitiveTypes::Real Halsgelenk::getGierWinkelMin() {
	return fg[1].getWinkelMin();
}

Schaedel* Halsgelenk::getSchaedel() {
	return this->schaedel;
}

Torso* Halsgelenk::getTorso() {
	return this->torso;
}

} // of namespace Kopf
} // of namespace Roboterverwaltung
} // of namespace Modellierung
} // of namespace NaoSimulation

/************************************************************
 End of Halsgelenk class body
 ************************************************************/
