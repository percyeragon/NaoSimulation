// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_KOPF_HALSGELENK_H
#define NAOSIMULATION_MODELLIERUNG_ROBOTERVERWALTUNG_KOPF_HALSGELENK_H

/************************************************************
 Halsgelenk class header
 ************************************************************/

//#include "NaoSimulation/Modellierung/Roboterverwaltung/Kopf/Pkg_Kopf.h"

#include "../../../Entwurf/NaoModel/Gelenke/ZweifachScharniergelenk.h"
#include "../Freiheitsgrad.h"
#include "../../../../PrimitiveTypes/Pkg_PrimitiveTypes.h"

#include "Schaedel.h"
#include "NaoSimulation/Modellierung/Roboterverwaltung/Rumpf/Torso.h"

/*
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Kopf {
class Schaedel;
}
}
}
}
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Rumpf {
class Torso;
}
}
}
}
*/
namespace NaoSimulation {
namespace Modellierung {
namespace Roboterverwaltung {
namespace Kopf {
using namespace Rumpf;
/************************************************************/
/**
 * 
 */
class Halsgelenk: public ::NaoSimulation::Entwurf::NaoModel::Gelenke::ZweifachScharniergelenk {
public:

	/**
	 * 
	 */
	::NaoSimulation::Modellierung::Roboterverwaltung::Freiheitsgrad fg[2];

	// Copy-Konstruktor
    Halsgelenk(Halsgelenk& halsgelenk, Schaedel* schaedel, Torso* torso):
		fg {
			Freiheitsgrad(halsgelenk.fg[0].getWinkel(), halsgelenk.fg[0].getWinkelMin(), halsgelenk.fg[0].getWinkelMax()),
			Freiheitsgrad(halsgelenk.fg[1].getWinkel(), halsgelenk.fg[1].getWinkelMin(), halsgelenk.fg[1].getWinkelMax())
		},
        schaedel(schaedel),
        torso(torso) {}

    // Konstruktor
    Halsgelenk(Schaedel* schaedel,
        Torso* torso,
        ::PrimitiveTypes::Real gierWinkel,
        ::PrimitiveTypes::Real gierWinkelMin,
        ::PrimitiveTypes::Real gierWinkelMax,
        ::PrimitiveTypes::Real nickWinkel,
        ::PrimitiveTypes::Real nickWinkelMin,
        ::PrimitiveTypes::Real nickWinkelMax
    ) : 
        ZweifachScharniergelenk(),
        schaedel(schaedel),
        torso(torso),
        fg {
			Freiheitsgrad(nickWinkel, nickWinkelMin, nickWinkelMax),
			Freiheitsgrad(gierWinkel, gierWinkelMin, gierWinkelMax)
		} {}
    
    static Halsgelenk* erzeugeHalsgelenk(
        Schaedel* schaedel,
        Torso* torso,
        NaoSimulation::Entwurf::NaoModel::ODE::dWorldID welt
    );
	
	void nickeHalsgelenk(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getNickWinkelMin();

	/**
	 * 
	 * @param winkel 
	 */
	void giereHalsgelenk(::PrimitiveTypes::Real /*in*/winkel);

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWinkel();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWinkelMax();

	/**
	 * 
	 * @return result 
	 */
	::PrimitiveTypes::Real getGierWinkelMin();

	Schaedel* getSchaedel();

	Torso* getTorso();

private:

	/**
	 * 
	 */
	Schaedel* schaedel;

	/**
	 * 
	 */
	Torso* torso;
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace Kopf
} // of namespace Roboterverwaltung
} // of namespace Modellierung
} // of namespace NaoSimulation

/************************************************************
 End of Halsgelenk class header
 ************************************************************/

#endif
